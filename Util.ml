(* Generated by           *
 *             CamlTrax   *
 *                     NG *
 *                        *
 * Copyright 2007-2023    *
 *             K.D.P.Ross *)


open Core.List


module OldString = String


module List = Core.List


module String = Core.String


module PolyMap = Core.Map.Poly


module PolySet = Core.Set.Poly


module StringSet = Core.String.Set


type ( 'a, 'b ) either = Left of 'a
                     | Right of 'b


let id x = ( x )


let flip f x y = ( f y x )


let uncurry f ( x, y ) = ( f x y )


let curry f x y = ( f ( x, y ) )


let apply f x = ( f x )


let const x _ = ( x )


let ( ++ ) f g x = ( f ( g x ) )


let ( -- ) = ( ( ^ ) )


let ( &> ) x f = ( f x )


let ( @> ) f g x = ( g ( f x ) )


let pair x y = ( ( x, y ) )


let pairMap  f g ( x, y ) = ( ( f x, g y ) )


let pairBoth  f = ( pairMap  f f )


let first f = ( pairMap  f id )


let stringOfChar   : char -> string = ( String.make 1 )


let trimString  : string -> string = ( OldString.trim )


let concatMap  f s = ( map ~f:f @> String.concat ~sep:s )


let around l r s = ( l -- s -- r )


let parenthesise = ( around "(" ")" )


let fold1 ~f:f xs = ( match ( xs ) with
                                                      | x :: xs -> ( fold ~f:f ~init:x xs )
                                                      | [] -> ( failwith "fold1 argument error" ) )


let nub xs = ( xs &>
                                                        PolySet.of_list @>
                                                        PolySet.elements )


let readFile  f = ( let is = ( open_in f )
                          in let lines = ( Std.input_list is )
                          in let _ = ( close_in is ) in
                      lines )


let gSeed  = ( ref 0 )


let gensym _ = ( let res = ( !gSeed  )
                                              in let _ = ( gSeed  := res + 1 ) in
                                          res )

