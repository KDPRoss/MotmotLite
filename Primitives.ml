(* Generated by           *
 *             CamlTrax   *
 *                     NG *
 *                        *
 * Copyright 2007-2023    *
 *             K.D.P.Ross *)


open Util


open ParserCombinators


module Out = OutputManager


exception UserFailure of Syntax.exp


let numP  : Q.t parse =
  ( let postProcess  s = ( match ( Str.split ( Str.regexp_string "." ) s ) with
                            | [ w ; f ] -> ( let d = ( Q.of_string ( "1" -- String.make ( String.length f ) '0' ) )
                                               in let f' = ( Q. ( of_string f / d ) ) in
                                           w &>
                                             Q.of_string @>
                                             Q. ( + ) f' @>
                                             just )
                            | [ w ] -> ( w &>
                                             Q.of_string @>
                                             just )
                            | _ -> ( fail "Bad number." ) )
      in let oldStyle  = ( regexp ( Str.regexp "[0-9]+\\([.][0-9]+\\)?" ) >>= postProcess  )
      in let postProcess  = ( function
                            | ( Some _, n ) -> ( Q.neg n )
                            | ( None, n ) -> ( n ) ) in
  maybe ( txt "-" ) <*> oldStyle  >>> postProcess  )


let typPrim  : Syntax.prim -> Syntax.typ =
  ( function
  | Num _ -> ( TCVal ( "Num" , [] ) ) )


let parsePrim  : Syntax.prim lazyParse =
  ( let num = ( numP >>> fun n -> Syntax.Num n ) in
  lazy num )


let primKindEnv   parseKnd =
  ( let assumps = [
        ( "Num" , parseKnd  "*" ) ;
      ] in
  match ( PolyMap.of_alist assumps ) with
  | `Duplicate_key k -> ( failwith ( "Duplicate key for `" -- k -- "` in `primKindEnv`; this is an implementation error." ) )
  | `Ok m -> ( Env.ofMap  m ) )

